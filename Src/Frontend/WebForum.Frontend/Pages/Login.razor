@page "/login"
@using WebForum.Frontend.Services.Interfaces

@inject IAuthService AuthService
@inject NavigationManager Navigation

<EditForm Model="@loginForm"
          OnValidSubmit="OnSubmit"
          class="mx-auto d-flex flex-column justify-center"
          style="height: 80%; width: 400px;">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Login"
                          Error="isFormError"
                          @onfocus="OnFocus"
                          Variant="Variant.Outlined"
                          @bind-Value="loginForm.Login"
                          Class="pb-4"/>
            <MudTextField Label="Password"
                          Error="isFormError"
                          @onfocus="OnFocus"
                          Variant="Variant.Outlined"
                          @bind-Value="loginForm.Password"
                          InputType="InputType.Password"
                          Class="pb-4"/>
            @if (isFormError)
            {
                <MudText Color="Color.Error">
                    Wrong login or password
                </MudText>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       Color="Color.Primary"
                       Disabled="isLoading"
                       Class="mx-auto">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Login</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private readonly LoginForm loginForm = new LoginForm();
    private bool isFormError = false;
    private bool isLoading = false;

    private class LoginForm
    {
        public string? Login { get; set; }
        public string? Password { get; set; }
    }

    private void OnFocus()
    {
        isFormError = false;
    }

    private async void OnSubmit()
    {
        if (loginForm.Login is null || loginForm.Password is null)
        {
            isFormError = true;
            return;
        }

        try
        {
            isLoading = true;
            await AuthService.LogIn(loginForm.Login, loginForm.Password, CancellationToken.None);
            Navigation.NavigateTo("");
        }
        catch (Exception)
        {
            isLoading = false;
            isFormError = true;
        }
        StateHasChanged();
    }

}