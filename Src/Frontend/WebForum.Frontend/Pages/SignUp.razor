@page "/signup"

@using WebForum.Frontend.HttpClients
@using System.ComponentModel.DataAnnotations

@inject AuthHttpClient AuthHttpClient
@inject ProfileHttpClient ProfileHttpClient
@inject NavigationManager Navigation

<div class="h-screen w-full flex flex-col justify-center items-center">
    <h1 class="text-4xl mb-6 text-primary font-bold">Registration</h1>
    <EditForm class="w-[28rem] flex flex-col justify-center items-center gap-2 bg-primary-content rounded-box p-4"
              Model="Form"
              OnValidSubmit="OnSubmit"
              disabled="@_isLoading">
        <DataAnnotationsValidator/>
        <InputText class="input input-bordered w-full"
                   type="text"
                   placeholder="* Login"
                   @bind-Value="Form.Login"/>
        <div class="text-left h-6 text-error self-start truncate">
            <ValidationMessage For="@(() => Form.Login)"/>
        </div>
        
        <InputText class="input input-bordered w-full"
                   type="text"
                   placeholder="Display name"
                   @bind-Value="Form.DisplayName"/>
        <div class="text-left h-6 text-error self-start truncate">
            <ValidationMessage For="@(() => Form.DisplayName)"/>
        </div>

        <InputText class="input input-bordered w-full"
                   type="uri"
                   placeholder="Avatar URI"
                   @bind-Value="Form.AvatarUri"/>
        <div class="text-left h-6 text-error self-start truncate">
            <ValidationMessage For="@(() => Form.AvatarUri)"/>
        </div>

        <InputText class="input input-bordered w-full"
                   type="password"
                   placeholder="* Password"
                   @bind-Value="Form.Password"/>
        <div class="text-left h-6 text-error self-start truncate">
            <ValidationMessage For="@(() => Form.Password)"/>
        </div>

        <InputText class="input input-bordered w-full"
                   type="password"
                   placeholder="* Repeat password"
                   @bind-Value="Form.RepeatPassword"/>
        <div class="text-left h-6 text-error self-start truncate">
            <ValidationMessage For="@(() => Form.RepeatPassword)"/>
        </div>

        <button class="btn btn-primary w-full"
                type="submit"
                disabled="@_isLoading">
            @if (!_isLoading)
            {
                <span>Sign up</span>
            }
            else
            {
                <span class="loading loading-spinner"></span>
                <span>loading</span>
            }
        </button>
    </EditForm>

    <a class="link link-primary"
       @onclick="OnSignInClick">
        sign in
    </a>
</div>

@code {
    [SupplyParameterFromForm] private SignUpForm Form { get; set; } = new();

    private bool _isLoading = false;

    private async Task OnSubmit(EditContext context)
    {
        _isLoading = true;

        var userId = await AuthHttpClient.Registration(Form.Login, Form.Password, CancellationToken.None);

        var displayName = string.IsNullOrEmpty(Form.DisplayName) ? Form.Login : Form.DisplayName;
        var avatarUri = string.IsNullOrEmpty(Form.AvatarUri) ? null : new Uri(Form.AvatarUri);
        await ProfileHttpClient.Create(userId, displayName, avatarUri, CancellationToken.None);

        Navigation.NavigateTo("/signin");

        _isLoading = false;
    }

    private void OnSignInClick()
    {
        Navigation.NavigateTo("signin");
    }

    private class SignUpForm
    {
        [Required]
        [RegularExpression("[a-z_.0-9]*", ErrorMessage = "Only numbers, letters, underscores and periods")]
        [MinLength(2, ErrorMessage = "Minimum length 2")]
        [MaxLength(12, ErrorMessage = "Maximum length 12")]
        public string Login { get; set; } = string.Empty;

        [MinLength(2, ErrorMessage = "Minimum length 2")]
        [MaxLength(12, ErrorMessage = "Maximum length 12")]
        public string? DisplayName { get; set; } = null;

        [RegularExpression("(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&%\\$#_]*)?", ErrorMessage = "Invalid URI")]
        public string? AvatarUri { get; set; } = null;

        [Required]
        [MinLength(10, ErrorMessage = "Minimum length 10")]
        public string Password { get; set; } = string.Empty;

        [Required]
        [MinLength(10, ErrorMessage = "Minimum length 10")]
        [Compare(nameof(Password), ErrorMessage = "Passwords must match")]
        public string RepeatPassword { get; set; } = string.Empty;
    }

}