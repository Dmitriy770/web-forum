@page "/signup"

@using WebForum.Frontend.HttpClients
@using System.ComponentModel.DataAnnotations

@inject AuthHttpClient AuthHttpClient
@inject ProfileHttpClient ProfileHttpClient
@inject NavigationManager Navigation

<EditForm Model="@signUpForm"
          OnValidSubmit="OnSubmit"
          class="mx-auto d-flex flex-column justify-center"
          style="height: 80%; width: 400px;">
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Login"
                          @bind-Value="signUpForm.Login"
                          For="@(() => signUpForm.Login)"
                          HelperText="Login"/>
            <MudTextField Label="Display name"
                          @bind-Value="signUpForm.DisplayName"
                          For="@(() => signUpForm.DisplayName)"
                          HelperText="Default name is login"/>
            <MudTextField Label="Avatar URI"
                          @bind-Value="signUpForm.AvatarUri"
                          For="@(() => signUpForm.AvatarUri)"
                          HelperText="Avatar uri"/>
            <MudTextField Label="Password"
                          @bind-Value="signUpForm.Password"
                          For="@(() => signUpForm.Password)"
                          InputType="InputType.Password"
                          HelperText="Password"/>
            <MudTextField Label="Repeat password"
                          @bind-Value="signUpForm.RepeatPassword"
                          For="@(() => signUpForm.Password)"
                          InputType="InputType.Password"
                          HelperText="Repeat password"/>
        </MudCardContent>
        <MudCardActions Class="d-flex flex-column align-stretch">
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       Color="Color.Primary"
                       Disabled="isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Sign Up</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private readonly SignUpForm signUpForm = new();
    private bool isLoading = false;

    private async Task OnSubmit(EditContext context)
    {
        if (!context.Validate())
        {
            return;
        }
        isLoading = true;
        
        var userId = await AuthHttpClient.SignUp(signUpForm.Login, signUpForm.Password, CancellationToken.None);
        
        var displayName = string.IsNullOrEmpty(signUpForm.DisplayName) ? signUpForm.Login : signUpForm.DisplayName;
        var avatarUri = string.IsNullOrEmpty(signUpForm.AvatarUri) ? null : new Uri(signUpForm.AvatarUri);
        await ProfileHttpClient.Create(userId, displayName, avatarUri, CancellationToken.None);
        
        Navigation.NavigateTo("/login");

        isLoading = false;
    }

    private class SignUpForm
    {
        [Required]
        [RegularExpression("[a-z_.0-9]*", ErrorMessage = "Only numbers, letters, underscores and periods")]
        [MinLength(2, ErrorMessage = "Minimum length 2")]
        [MaxLength(12, ErrorMessage = "Maximum length 12")]
        public string Login { get; set; } = string.Empty;

        [MinLength(2, ErrorMessage = "Minimum length 2")]
        [MaxLength(12, ErrorMessage = "Maximum length 12")]
        public string DisplayName { get; set; } = string.Empty;

        [RegularExpression("(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&%\\$#_]*)?", ErrorMessage = "Invalid URI")]
        public string AvatarUri { get; set; } = string.Empty;

        [Required]
        [MinLength(10, ErrorMessage = "Minimum length 10")]
        public string Password { get; set; } = string.Empty;

        [Required]
        [Compare(nameof(Password), ErrorMessage = "Passwords must match")]
        public string RepeatPassword { get; set; } = string.Empty;
    }

}